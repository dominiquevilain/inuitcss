
/*!
 * inuitcss, by @csswizardry
 *
 * github.com/inuitcss | inuitcss.com
 */
///*------------------------------------*\
//    #SETTINGS - DEFAULTS
//\*------------------------------------*/

// These variables are inuitcss’ defaults; they should not be modified or
// adjusted directly; you should predefine the variables in your own project.

// High-level base settings.
$inuit-base-font-size:          16px !default;
$inuit-base-line-height:        24px !default;
$inuit-base-text-color:         #333 !default;
$inuit-base-background-color:   #fff !default;

// Namespace.
//
// Would you like inuitcss’ classes to be prepended with a namespace? If so,
// define it here.
$inuit-namespace:               null !default;

// These variables are framework variables, sourced from variables defined
// above. Feel free to use these variables throughout your project, but do not
// modify or reassign them.
$inuit-base-spacing-unit:           $inuit-base-line-height;
$inuit-base-spacing-unit--small:    round($inuit-base-spacing-unit / 2);
$inuit-base-spacing-unit--large:    round($inuit-base-spacing-unit * 2);

///*------------------------------------*\
//    #SETTINGS-RESPONSIVE
//\*------------------------------------*/

// Hold our breakpoint aliases and conditions in a list.
//
// These can be invoked later on via the `media-query()` mixin found in
// `_tools.responsive`.

$breakpoints: (
    "palm"          "screen and (max-width: 719px)",
    "lap"           "screen and (min-width: 720px) and (max-width: 1023px)",
    "lap-and-up"    "screen and (min-width: 720px)",
    "portable"      "screen and (max-width: 1023px)",
    "desk"          "screen and (min-width: 1024px)",
    "retina"        "(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)"
) !default;

// If we have included this file, set a variable to tell the rest of the
// framework that we have some responsive settings.
$inuit-responsive-settings: true;


///*------------------------------------*\
//    #TOOLS-FUNCTIONS
//\*------------------------------------*/

// inuitcss makes use of a few functions that are also available for you to use
// later on in your extension of the framework.

// Maths helpers.
//
// Halve and double numbers, returning rounded integers. E.g.:
//
// .foo {
//     padding: halve(3.2px);
// }
//

@function quarter($inuit-number) {
    @return round($inuit-number / 4);
}

@function halve($inuit-number) {
    @return round($inuit-number / 2);
}

@function double($inuit-number) {
    @return round($inuit-number * 2);
}

@function quadruple($inuit-number) {
    @return round($inuit-number * 4);
}


///*------------------------------------*\
//    #TOOLS-MIXINS
//\*------------------------------------*/

// inuitcss has a number of default mixins that the framework, and developers
// working with it, can make use of.

// Create a fully formed type style (sizing and vertical rhythm) by passing in a
// single value, e.g.:
//
// .foo {
//     @include inuit-font-size(12px);
// }
//
// This will generate a rem-based font-size with its pixel fallback, as well as
// a unitless line-height which will place the element on your baseline, e.g.:
//
// .foo {
//     font-size: 12px;
//     font-size: 0.75rem;
//     line-height: 2;
// }
//
// If you do not want inuitcss to generate you a line-height automatically, you
// simply pass in your own as a second paramater:
//
// .foo {
//     @include inuit-font-size(12px, 1.5);
// }
//
// This will yield:
//
// .foo {
//     font-size: 12px;
//     font-size: 0.75rem;
//     line-height: 1.5;
// }
//
// This parameter can be any integer, ‘inherit’, or ‘normal’. If you don’t want
// a line-height at all, pass in a second paramater of ‘none’ or ‘false’:
//
// .foo {
//     @include inuit-font-size(12px, none);
// }
//
// This will yield:
//
// .foo {
//     font-size: 12px;
//     font-size: 0.75rem;
// }

@mixin inuit-font-size($inuit-font-size, $inuit-line-height: auto) {
    font-size: $inuit-font-size;
    font-size: ($inuit-font-size / $inuit-base-font-size) * 1rem;

    @if $inuit-line-height == auto {
        line-height: ceil($inuit-font-size / $inuit-base-line-height) * ($inuit-base-line-height / $inuit-font-size);
    }

    @else {

        @if (type-of($inuit-line-height) == number or $inuit-line-height == inherit or $inuit-line-height == normal) {
            line-height: $inuit-line-height;
        }

        @elseif ($inuit-line-height != none and $inuit-line-height != false) {
            @warn "D’oh! ‘#{$inuit-line-height}’ is not a valid value for `line-height`."
        }

    }

}


///*------------------------------------*\
//    #TOOLS-RESPONSIVE
//\*------------------------------------*/

// Here we set a variable assuming that responsive settings are not set
// globally. If they have been previously been defined, the following variable
// will be overriden and will be set to `true`.

$inuit-responsive-settings: false !default;

@if ($inuit-responsive-settings == false) {
    @warn "Oops! Have you included a responsive settings file?"
}

// A simple mixin to quickly generate whole media queries from the aliases and
// conditions defined in `_settings.responsive.scss`.
//
// Usage:
//
// .foo {
//     color: green;
//
//     @include media-query(palm) {
//         color: red;
//     }
//
// }

@mixin media-query($mq) {

    $breakpoint-found: false;

    // Loop through the list of breakpoints we’ve provided in our settings file.
    @each $breakpoint in $breakpoints {

        // Grab the alias and the condition from their respective locations in
        // the list.
        $alias:     nth($breakpoint, 1);
        $condition: nth($breakpoint, 2);

        // If the media query we’ve specified has an alias and a condition...
        @if $mq == $alias and $condition {

            // ...tell the mixin that we’ve found it...
            $breakpoint-found: true;

            // ...and spit it out here.
            @media #{$condition} {
                @content;
            }

        }

    }

    // If the user specifies a non-exitent alias, send them a warning.
    @if $breakpoint-found == false{
        @warn "Oops! Breakpoint ‘#{$mq}’ does not exist."
    }

}

///*------------------------------------*\
//    #GENERIC-NORMALIZE
//\*------------------------------------*/
/*! normalize.css v3.0.1 | MIT License | git.io/normalize */

///*------------------------------------*\
//    #GENERIC-RESET
//\*------------------------------------*/
/**/

///*------------------------------------*\
//    #GENERIC-BOX-SIZING
//\*------------------------------------*/

/**
 * Set the global `box-sizing` state to `border-box`.
 *
 * css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
 * paulirish.com/2012/box-sizing-border-box-ftw
 */
html {
    -webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
            box-sizing: border-box;
}

* {

    &,
    &:before,
    &:after {
        -webkit-box-sizing: inherit;
           -moz-box-sizing: inherit;
                box-sizing: inherit;
        }

}

// If we have included this file, set a variable to tell the rest of the
// framework that global `box-sizing: border-box` has been set.
$inuit-global-border-box: true;


///*------------------------------------*\
//    #GENERIC-SHARED
//\*------------------------------------*/

/**
 * Where `margin-bottom` is concerned,this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * As per: csswizardry.com/2012/06/single-direction-margin-declarations
 */
h1, h2, h3, h4, h5, h6,
ul, ol, dl,
blockquote, p, address,
table,
fieldset, figure,
pre,
%margin-bottom {
    margin-bottom: $inuit-base-spacing-unit;
    margin-bottom: ($inuit-base-spacing-unit / $inuit-base-font-size) * 1rem;
}

/**
 * Where `margin-left` is concerned we want to try and indent certain elements
 * by a consistent amount. Define that amount once,here.
 */
ul, ol, dd,
%margin-left {
    margin-left: 2 * $inuit-base-spacing-unit;
    margin-left: (2 * $inuit-base-spacing-unit / $inuit-base-font-size) * 1rem;
}


/*------------------------------------*\
    #BASE-PAGE
\*------------------------------------*/

/**
 * High-, page-level styling.
 *
 * 1. Set the default `font-size` and `line-height` for the entire project,
 *    sourced from our default variables. The `font-size` is calculated to exist
 *    in ems, the `line-height` is calculated to exist unitlessly.
 * 2. Force scrollbars to always be visible to prevent awkward ‘jumps’ when
 *    navigating between pages that do/do not have enough content to produce
 *    scrollbars naturally.
 * 3. Ensure the page always fills at least the entire height of the viewport.
 * 4. Prevent certain mobile browsers from automatically zooming fonts.
 * 5. Fonts on OSX will look more consistent with other systems that do not
 *    render text using sub-pixel anti-aliasing.
 */
html {
    font-size: ($inuit-base-font-size / 16px) * 1em; /* [1] */
    line-height: $inuit-base-line-height / $inuit-base-font-size; /* [1] */
    background-color: $inuit-base-background-color;
    color: $inuit-base-text-color;
    overflow-y: scroll; /* [2] */
    min-height: 100%; /* [3] */
    -webkit-text-size-adjust: 100%; /* [4] */
        -ms-text-size-adjust: 100%; /* [4] */
    -moz-osx-font-smoothing: grayscale; /* [5] */
     -webkit-font-smoothing: antialiased; /* [5] */
}

/*------------------------------------*\
    #BASE-HEADINGS
\*------------------------------------*/

/**
 * Headings 1–6, with corresponding Greek-alphabet abstract classes for double-
 * stranded heading hierarchy: csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css
 */

// Predefine the variables below in order to alter and enable specific features.
$inuit-heading-size-1:  36px !default;
$inuit-heading-size-2:  30px !default;
$inuit-heading-size-3:  24px !default;
$inuit-heading-size-4:  20px !default;
$inuit-heading-size-5:  16px !default;
$inuit-heading-size-6:  14px !default;

h1,
.#{$inuit-namespace}alpha,
%#{$inuit-namespace}alpha {
    @include inuit-font-size($inuit-heading-size-1);
}

h2,
.#{$inuit-namespace}beta,
%#{$inuit-namespace}beta {
    @include inuit-font-size($inuit-heading-size-2);
}

h3,
.#{$inuit-namespace}gamma,
%#{$inuit-namespace}gamma {
    @include inuit-font-size($inuit-heading-size-3);
}

h4,
.#{$inuit-namespace}delta,
%#{$inuit-namespace}delta {
    @include inuit-font-size($inuit-heading-size-4);
}

h5,
.#{$inuit-namespace}epsilon,
%#{$inuit-namespace}epsilon {
    @include inuit-font-size($inuit-heading-size-5);
}

h6,
.#{$inuit-namespace}zeta,
%#{$inuit-namespace}zeta {
    @include inuit-font-size($inuit-heading-size-6);
}

/*------------------------------------*\
    #BASE-PARAGRAPHS
\*------------------------------------*/

/**
 * The `.lede` class is used to make the introductory text (usually a paragraph)
 * of a document slightly larger: en.wikipedia.org/wiki/Lede_(news)
 */

// Predefine the variables below in order to alter and enable specific features.
$inuit-lede-size:   1.125 !default;

.#{$inuit-namespace}lede,
%#{$inuit-namespace}lede {
    @include inuit-font-size($inuit-base-font-size * $inuit-lede-size);
}

/*------------------------------------*\
    #BASE-LISTS
\*------------------------------------*/

/**
 * Remove extra vertical spacing when nesting lists.
 */
li {

    > ul,
    > ol {
        margin-bottom: 0;
    }

}

/*------------------------------------*\
    #BASE-IMAGES
\*------------------------------------*/

/**
 * 1. Fluid images for responsive purposes.
 * 2. Offset `alt` text from surrounding copy.
 * 3. Setting `vertical-align` removes the whitespace that appears under `img`
 *    elements when they are dropped into a page as-is. Safer alternative to
 *    using `display: block;`.
 */
img{
    max-width: 100%; /* [1] */
    font-style: italic; /* [2] */
    vertical-align: middle; /* [3] */
}



/**
 * 1. Google Maps breaks if `max-width: 100%` acts upon it; use their selector
 *    to remove the effects.
 * 2. If a `width` and/or `height` attribute have been explicitly defined, let’s
 *    not make the image fluid.
 */
.gm-style img, /* [1] */
img[width], /* [2] */
img[height] {  /* [2] */
    max-width: none;
}

/*------------------------------------*\
    #OBJECTS-LAYOUT
\*------------------------------------*/

/**
 * The inuitcss layout system uses `box-sizing: border-box;` and
 * `display: inline-block;` to create an extremely powerful, flexible
 * alternative to the traditional grid system. Combine the layout items with
 * the widths found in `trumps.widths`.
 */

// Predefine the variables below in order to alter and enable specific features.
$inuit-layout-namespace:        $inuit-namespace !default;

$inuit-layout-gutter:           $inuit-base-spacing-unit !default;
$inuit-layout-gutter--tiny:       quarter($inuit-layout-gutter) !default;
$inuit-layout-gutter--small:        halve($inuit-layout-gutter) !default;
$inuit-layout-gutter--large:       double($inuit-layout-gutter) !default;
$inuit-layout-gutter--huge:     quadruple($inuit-layout-gutter) !default;

$inuit-enable-layout--tiny:     false !default;
$inuit-enable-layout--small:    false !default;
$inuit-enable-layout--large:    false !default;
$inuit-enable-layout--huge:     false !default;
$inuit-enable-layout--flush:    false !default;
$inuit-enable-layout--rev:      false !default;
$inuit-enable-layout--middle:   false !default;
$inuit-enable-layout--bottom:   false !default;
$inuit-enable-layout--right:    false !default;
$inuit-enable-layout--center:   false !default;
$inuit-enable-layout--auto:     false !default;

// Here we set a variable assuming that `box-sizing: border-box;` is not set
// globally. If it has been previously been defined, the following variable will
// be overriden and will be set to `true`.
$inuit-global-border-box: false !default;

/**
 * Begin a layout group.
 */
.#{$inuit-layout-namespace}layout,
%#{$inuit-layout-namespace}layout {
    list-style: none;
    margin:  0;
    padding: 0;
    margin-left: -$inuit-layout-gutter;
}

    /**
     * 1. Cause columns to stack side-by-side.
     * 2. Space columns apart.
     * 3. Align columns to the tops of each other.
     * 4. Full-width unless told to behave otherwise.
     * 5. Required to combine fluid widths and fixed gutters.
     */
    .#{$inuit-layout-namespace}layout__item,
    %#{$inuit-layout-namespace}layout__item {
        display: inline-block; /* [1] */
        padding-left: $inuit-layout-gutter; /* [2] */
        vertical-align: top; /* [3] */
        width: 100%; /* [4] */

        @if $inuit-global-border-box == false {
            -webkit-box-sizing: border-box; /* [5] */
               -moz-box-sizing: border-box; /* [5] */
                    box-sizing: border-box; /* [5] */
        }

    }

@if ($inuit-enable-layout--tiny == true) {

    /**
     * Layouts with tiny gutters.
     */

    .#{$inuit-layout-namespace}layout--tiny,
    %#{$inuit-layout-namespace}layout--tiny {
        margin-left: -($inuit-layout-gutter--tiny);

        > .#{$inuit-layout-namespace}layout__item,
        > %#{$inuit-layout-namespace}layout__item {
            padding-left: $inuit-layout-gutter--tiny;
        }

    }

}

@if ($inuit-enable-layout--small == true) {

    /**
     * Layouts with small gutters.
     */

    .#{$inuit-layout-namespace}layout--small,
    %#{$inuit-layout-namespace}layout--small {
        margin-left: -($inuit-layout-gutter--small);

        > .#{$inuit-layout-namespace}layout__item,
        > %#{$inuit-layout-namespace}layout__item {
            padding-left: $inuit-layout-gutter--small;
        }

    }

}

@if ($inuit-enable-layout--large == true) {

    /**
     * Layouts with large gutters.
     */

    .#{$inuit-layout-namespace}layout--large,
    %#{$inuit-layout-namespace}layout--large {
        margin-left: -($inuit-layout-gutter--large);

        > .#{$inuit-layout-namespace}layout__item,
        > %#{$inuit-layout-namespace}layout__item {
            padding-left: $inuit-layout-gutter--large;
        }

    }

}

@if ($inuit-enable-layout--huge == true) {

    /**
     * Layouts with huge gutters.
     */

    .#{$inuit-layout-namespace}layout--huge,
    %#{$inuit-layout-namespace}layout--huge {
        margin-left: -($inuit-layout-gutter--huge);

        > .#{$inuit-layout-namespace}layout__item,
        > %#{$inuit-layout-namespace}layout__item {
            padding-left: $inuit-layout-gutter--huge;
        }

    }

}





@if ($inuit-enable-layout--flush == true) {

    /**
     * Layouts with no gutters.
     */

    .#{$inuit-layout-namespace}layout--flush,
    %#{$inuit-layout-namespace}layout--flush {
        margin-left: 0;

        > .#{$inuit-layout-namespace}layout__item,
        > %#{$inuit-layout-namespace}layout__item {
            padding-left: 0;
        }

    }

}

@if ($inuit-enable-layout--rev == true) {

    /**
     * Reversed rendered order of layout items, e.g. items 1, 2, 3, 4 in your
     * markup will display in order 4, 3, 2, 1 on your page.
     */

    .#{$inuit-layout-namespace}layout--rev,
    %#{$inuit-layout-namespace}layout--rev {
        direction: rtl;
        text-align: left;

        > .#{$inuit-layout-namespace}layout__item,
        > %#{$inuit-layout-namespace}layout__item {
            direction: ltr;
            text-align: left;
        }

    }

}

@if ($inuit-enable-layout--middle == true) {

    /**
     * Align layout items to the vertical centers of each other.
     */

    .#{$inuit-layout-namespace}layout--middle,
    %#{$inuit-layout-namespace}layout--middle {

        > .#{$inuit-layout-namespace}layout__item,
        > %#{$inuit-layout-namespace}layout__item {
            vertical-align: middle;
        }

    }

}

@if ($inuit-enable-layout--bottom == true) {

    /**
     * Align layout items to the vertical bottoms of each other.
     */

    .#{$inuit-layout-namespace}layout--bottom,
    %#{$inuit-layout-namespace}layout--bottom {

        > .#{$inuit-layout-namespace}layout__item,
        > %#{$inuit-layout-namespace}layout__item {
            vertical-align: bottom;
        }

    }

}

@if ($inuit-enable-layout--right == true) {

    /**
     * Make the layout items fill up from the right hand side.
     */

    .#{$inuit-layout-namespace}layout--right,
    %#{$inuit-layout-namespace}layout--right {
        text-align: right;

        > .#{$inuit-layout-namespace}layout__item,
        > %#{$inuit-layout-namespace}layout__item {
            text-align: left;
        }

    }

}

@if ($inuit-enable-layout--center == true) {

    /**
     * Make the layout items fill up from the center outward.
     */

    .#{$inuit-layout-namespace}layout--center,
    %#{$inuit-layout-namespace}layout--center {
        text-align: center;

        > .#{$inuit-layout-namespace}layout__item,
        > %#{$inuit-layout-namespace}layout__item {
            text-align: left;
        }

    }

}

@if ($inuit-enable-layout--auto == true) {

    /**
     * Cause layout items to take up a non-explicit amount of width.
     */
    .#{$inuit-layout-namespace}layout--auto,
    %#{$inuit-layout-namespace}layout--auto {

        > .#{$inuit-layout-namespace}layout__item,
        > %#{$inuit-layout-namespace}layout__item {
            width: auto;
        }

    }

}
